<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use App\Models\Product;
use App\Models\Member;
use App\Library\DataTables;
use App\Library\Modules\TransactionLibrary;
use App\Library\Modules\EntryCodesLibrary;
use App\Library\Modules\PaynamicsLibrary;
use App\Http\Requests\CodePurchaseRequest;

/**
 * @group Members/Entry Codes
 *
 */
class CodeVaultController extends Controller
{
    //
    public function index()
    {
        $member = Auth::user();
        
        return view('codevault-list', ['member' => $member]);
    }
    
    /**
     * Display the list of registration codes purchased or assigned to the logged in member
     *
     * @queryParam request array required 
     * JSON request generated by DataTable
     * 
     * @queryParam id integer required 
     * The id of the logged in member. Example: 5
     * 
     * @param  \Illuminate\Http\Request  $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function data(Request $request, $id)
    {
        $tablecols = [
            0 => 'a.id',
            1 => 'a.created_at',
            2 => 'a.pincode1',
            3 => 'a.pincode2',
            4 => 'b.name',
            5 => 'b.price',
            6 => 'a.is_used',
            7 => 'a.remarks',
        ];
        
        $filteredmodel = DB::table('registration_codes as a')
                                ->join('products as b', 'b.id', '=', 'a.product_id')
                                ->where('a.assigned_to_member_id', $id)
                                ->select(DB::raw("a.id, 
                                                a.created_at, 
                                                a.pincode1,
                                                a.pincode2,
                                                b.name,
                                                b.price,
                                                a.is_used,
                                                a.remarks")
                            );
        
        if($request->has('status') && is_numeric($request->status) ) {
            $filteredmodel->where('a.is_used', $request->status);
        }
        
        if($request->has('start_date') && !empty($request->start_date)) {        
            if($request->has('end_date') && !empty($request->end_date && $request->start_date != $request->end_date)) {
                $filteredmodel->whereBetween('a.created_at', [$request->start_date, $request->end_date . ' 23:59:00']);
            } else {
                $filteredmodel->whereDate('a.created_at', $request->start_date);
            }
        }

        $modelcnt = $filteredmodel->count();

        $data = DataTables::DataTableFiltersNormalSearch($filteredmodel, $request, $tablecols, $hasValue, $totalFiltered);

        return response(['data'=> $data,
            'draw' => $request->draw,
            'recordsTotal' => ($hasValue)? $data->count(): $modelcnt,
            'recordsFiltered' => ($hasValue)? $totalFiltered: $modelcnt], 200);
    }
    
    /**
     * Display product purchase form
     * 
     * - Once a product(s) is purchased, a number of registration code is also created depends on the purchased quantity
     */
    public function purchaseform()
    {
        $member = Auth::user();
        $products = DB::table('products')->select('name', 'price', 'id')->get();
        $walletTypes = DB::table('wallet_types')->select('method', 'name')->orderBy('sequence')->get();
        $paymentMethods = DB::table('payment_methods')->select('method', 'name')->orderBy('sequence')->get();
        $disbursementMethods = DB::table('paynamics_disbursement_methods')->select('method', 'name')->orderBy('sequence')->get();
        
        return view('codevault-purchaseform', ['member' => $member, 
            'products' => $products, 
            'walletTypes' => $walletTypes,
            'paymentMethods' => $paymentMethods,
            'disbursementMethods' => $disbursementMethods]);
    }
    
    /**
     * Store product purchase
     *
     * @queryParam package integer required
     * Product id
     *
     * @queryParam quantity integer required
     * Quantity of product to be purchased
     *
     * @queryParam total_amount float required
     * Product price * Quantity. Example: 1999.99
     *
     * @queryParam payment_method string required
     * Either E-wallet or Paynamics. Example: ewallet,paynamics
     *
     * @queryParam source string required
     * Required if payment_method = E-wallet
     *
     * @queryParam source_amount float required
     * Current wallet amount. Example: 1999.99
     * 
     * @param  \App\Http\Requests\NewUserChangePasswordRequest  $request
     * 
     * @param  \App\Http\Requests\CodePurchaseRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function purchase(CodePurchaseRequest $request)
    {
        try
        {
            if($request->payment_method == 'ewallet' && $request->total_amount > $request->source_amount) {
                throw new \Exception("You don't have enough balance to purchase this request. Please choose other wallet source or use different payment method");
            }
            
            DB::beginTransaction();
            
            $member = Auth::user();
            $product = Product::find($request->package);
                
            if($request->payment_method == 'paynamics') {
                $trans = TransactionLibrary::savePaynamicsTransaction($member, $product, $request->quantity, $request->total_amount);
                
                $resp = PaynamicsLibrary::makeTransaction($request, $trans);
//                '#paynamicsTable'
                $route = 'profile.show';
                $ref = ['id' => $member->id . '#paynamics'];
                $msg = 'Your request has been forwarded to paynamics. Please wait for a moment for their feedback.';
                
            } else {
                $this->processProductPurchase($member, $product, $request->quantity, 'Purchase', $request->payment_method, $request->source, $request->total_amount);
                $route = 'codevault.index';
                $ref = null;
                $msg = 'Thank you for your purchase. Please use these entry codes below when registering new accounts';
            }
            
            DB::commit();
            return redirect()->route($route, $ref)->with('status-success', $msg);
            
        } catch (\Exception $ex) {
            DB::rollback();
            return redirect()->route('codevault.purchaseform', '#payment_form')
                    ->with('status-failed', $ex->getMessage())
                    ->withInput($request->input());
        }
    }
    
    private function processProductPurchase(Member $member, Product $product, $quantity, $ttype, $tpaymetMethod, $tsource, $tttlAmount)
    {
        $trans = TransactionLibrary::saveProductPurchase($member, $product, $quantity, $ttype, $tpaymetMethod, $tsource, $tttlAmount);

        if($trans) {
            EntryCodesLibrary::createEntryCodes($product, $member->id, $quantity, 'Purchased by ' . $member->username, $trans->id);
        }
        
        return;
    }
}
